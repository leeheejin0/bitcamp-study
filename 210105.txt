맥은 mingw gcc 컴파일ㄹ 따로 안받아도 됨
stdio ( standard input output 의 약자)

맥에선 dir 아니고 ls
맥에서 실행할 땐 해당 방에서 찾지 않기 때문에 ./(현재 폴더에서 찾아라)열고 싶은 파일 쳐줘야 함
유닉스나 맥에서는 실행파일 확장자 이름 안줌 gcc -o hello hello.c 이런 식으로

node.exe = javascript로 작성된 명령어파일을 읽어서 실행하는 JS 엔진

취미에 쓰는 돈보다 내 돈 벌어주는 장비에 쓰는 돈을 더 잘 써야 함
일단 장비부터ㅋㅋㅋㅋ 장비는 맥으로, 맥은 잘 안망가져서 오래 쓸 거 생각하면 비슷함

CLI(command line Interface?

JVM (bytecode 인터프리터)


 컴파일 방식은 모든 문법이 완전해야 컴파일해줌
인터프리터 방식은 오류 이전까지만 실행하고 오류 이후부터 실행안함

<Java SE (standard edition)>
- JDK (Java Development Kit)
  - JRE (Java Runtime Enviornment)
     - java.exe(JVM) + 실행에 필요한 도구
  - 개발 관련 도구  
     - javac.exe (컴파일러)
     - jdb.exe (디버거)
     - javap.exe (프로파일러)
     - javadoc.exe (문서생성기)

<Java EE (enterprise edition)>
- 웹 프로그래밍 관련 도구
- 분산 프로그래밍 관련 도구
- 자원 관리 관련 도구
- Java SE는 포함하고 있지 않는다. 

<Java ME (micro edition)>
- embedded 관련 도구
- 이것도 별개. 

openJDK에 플러스알파(plugin)해서 Oracle JDK 만듦
여러 곳의 JDK가 있는데 기본적으로 Oracle꺼 쓰면 됨
오라클 JDK -> 8버전(LTS)까지는 무료
LTS 버전들이 8과 11인데 8은 무료 11은 유료
openJDK는 유지보수를 해주지 않기 때문에 기업에선 책임 문제때문에 반드시 유료로 쓸 수 밖에 없음


graallvm.org 가기
맥 사용자는 크롬으로 다운받기
커뮤니티 버전 다운
맥 사용자는 맨 위에 있는 darwin 다운받기
윈도우는 -windows-amd64-20.0.0.zip

tomcat.apache.org 들어가서 왼쪽 스택의 tomcat 9 감 ( 맥 윈도우 공통)
core에 zip 파일 다운
톰캣은 자바로 만들었기 때문에 리눅스나 윈도우나 사용 가능, 하지만 속도가 c나 c++로 만든 프로그램보단 좀 느림
톰캣은 웹 어플리케이션을 실행하는 역살을 한다
pgp, sha512 - > 검증코드, 내가 다운받은 파일이 해킹파일이 아닌지 알 수 있는 코드 파일
                     (해시코드 = 디지털지문)
가장 완벽한 방법은 서버와 로컬을 반복해서 비교하는 것(현실상 불가) 디지털지문으로 계산해서 일치하는지 보면 됨
윈도우즈에선 파워쉘에서 해야 함

암기를 못해도 상관 없지만 연봉을 빠르게 올리고 싶다 그러면 강의 100프로 소화해야 함
해시 제너레이터
계산 식(algorithm)의 종류가 있음

shell 스크립트
powershell은 다른 언어가 필요

language / script
잘 짜여짐 / 좀 덜 짜여짐



소위 맥과 유닉스와 같이
좀더 복잡한 걸 다룰 수 있는 스크립트가 필요해진 윈도우즈에서 windows Powershell을 만듦

파워셀은 맥에서 쓰는 것들도 좀 먹힘 dir = ls, cd d 탭 -> d로 시작하는 폴더로 바로 갈 수 있음


운영체제에 명령을 내릴 수 있는 방법이 두개가 있는데 GUI, CLI 이렇게 있음
CLI 는 명령프롬프트와 파워쉘에서 명령어로 입력하는 것
GUI Graphic User Interface, 아이콘을 보고 마우스포인터가 클릭할 수 있는.

CLI 는 또다른 말로 OS(운영체제)의 껍데기, 즉 
Shell 이라고 부름. 이 Shell 에 입력할 수 있는 명령어 문법 = Shell Script라고 한다
유닉스에는 sh, csh, tsh, bsh, bash, zsh 등 많은 Shell Script가 있음

좀 더 복잡한 걸 다룰 수 있는 스크립트가 필요해서 만든 PowerShell은 명령프롬프트와 명령어가 겹치기도 하고 다르기도 함

한글로 표현할 땐 공식적으론 '윈도우'
명령프롬프트와 파워쉘은 둘다 쉘이지만 다른 쉘 스크립트를 쓰고 있음

해시값/디지털 지문이 무엇인지
어떤 파일이 있으면 특별한 계산식(알고리즘 = 특정 작업을 완성하기 위한, 수행하기 위한 논리적인 전개, 연산식. 
"결과를 만들어내기 위한 계산식" - 가끔 신입개발자한테 물어보는 경우 있음 알아두기)
MD5, SHA-1, SHA256, SHA512, PGP
-> 해시코드(해시값hash value)를 뽑아내는 알고리즘
해시코드 : 파일이나 데이터를 구분하는 식별자. 다운로드 받은 파일이 오리지널 파일과 동일한지 비교, 확인할 때 씀. 
데이터 또는 파일을 식별할 때 사용하는 디지털지문, 100프로는 아니고 99프로정도 식별 가능 겹치는 경우도 있음. 
인증서, 민증이 해시코드랑 같은 것

파워셀에서 드래그 오른쪽 클릭 하고 붙이고 싶은 위치에 오른쪽 클릭하면 붙음(맥은 그냥 커맨드CV)
PS C:\Users\bitcamp\Downloads> get-filehash -algorithm sha512 'apache-tomcat-9.0.41.zip' | Format-List
| 는 or 라는 의미 
맥에선 어케 할까? - 구글에 macos sha512 checksum이라고 검색해보기
openssl dgst -sha512 /파일패스/파일명
          digest(요약하다)
맥 - cmd에서 뒤로 나가기 ctrl c

graalvm 압축 풀어서 c: java /에 넣기

graalvm 맥은 jdk 압축 풀때 아무데나 풀지 말고 지정된 폴더에 풀어야함.,.
집가서 맥북 포맷해야겟넹ㅎㅎ..
맥 사용자는 cmd 다운로드 폴더에서 ls
ls 하면 graalvm 파일이 보일 것. 
sudo cp g*gz /Library/Java/J*/
(cp는 copy)
cd /L치고 Tab키/J탭/J탭 -> cd /Library/Java/JavaVirtualMachines
ls 했을 때 g*gz 말고 다른 폴더 있나. 없으면
sudo tar -xvf *.gz
압출 풀려야 함
cd
cd ..
pwd
ls *sh
ls - al
목록 중에  .zshrc 파일 있나 없나 보기 - 최신 맥은 .zshrc이지만 예전 맥은 .bash_profile이 ㅣㅇㅆ을 것
.zshrc 파일 없으면
nano .bash_profile
export JAVA_HOME=$(/usr/libexec/java_home -v 11)

export PATH=${JAVA_HOME}/bin:${PATH}

ctrl o 누르고 ㅇ엔터(저장)
ctrl x  뒤로 나가기 명령프롬프트 자웠다ㅏㄱ 다시 켜보기
openssl
ls
java -version
echo $PATH
/usr/lilbexec/java-home -v 11 


잘 환경변수 됐는지 알려면
윈도우는 C:\Users\bitcamp>echo %JAVA_HOME%
맥에서는 C:\Users\bitcamp>echo $JAVA_HOME


뭔가 잘못 치면 앞에 # 붙이면 주석이 됨

자바 11 버전 쓰기
현업에선 아직 8 쓰고 있음
8에서 업그레이드 해도 11 버전 쓸 것임
11이 유지보수 해주는 버전이기 때문에 11 써야 함
graalvm 11 버전으로 바꿔주기

https://blog.softwaremill.com/graalvm-installation-and-setup-on-macos-294dd1d23ca2

**집가서 할 일***********************************************************
graalvm 다운로드 및 설치, 환경변수 설정
맥 -brew, git server
node 설치
이클립스 재설치.. (윈도우에 이미 깔려 있었으면 재설치하고 재설치하면서 체인지 워크스페이스 해서 뒤에 2만 붙여주기)
잘 모르겠음 걍 싹 지우고 새로 까는게 빠름
MinGW, 톰캣은 안해도 됨(컴파일러와 해시코드 보여주려고 다운받은 것)

개발자 기본
컴터 용량 확인하기 최소 8기가 가능하면 16기가 이상은 있어야 함
코어는 기본 2코어, 가능하면 4코어
하드는 ssd로 1테라

개발용과 인증서 쓰고 생활할때 쓰는 용이랑 구분하기
개발용은 수시로 포맷해야 하고 잡다한 거 깔려있으면 안됨(카톡정돈 괜춘)
인터넷 뱅킹을 하다보면 방화벽을 무의식중에 계속 깔게 되는데
그러면 성능 엄청 저하됨
그리고 알약은 보안을 취약하게 만듦 지우기
윈도우즈에 있는 보안만 쓰고 따로 안랩 V3 이런 거 말라, 특히 알약 쓰지 말라

naver d2 coding
맥이나 윈도우나 다운받은 폴더에서 all 파일 누르면 설치 버튼 나옴
맥운 두개 뜨니 둘다 설치
eomcs-docs 밑에 dev툴 밑에 개발환경도구 준비 가서 보고 하기
****************************************************************************

주 에디터는 인텔리j, 이클립스 등을 씀
vs코드는 보조에디터로 사용
공공 프로젝트는 다 이클립스 씀(무료라서)

Java IDE 도구(예를 들어 이클립스) Integrated Development Enviornment 통합 개발 환경
이클립스 가서 다운로드 가서
>> Select Another Mirror 선택 후 한국 꺼 다운받기
중국껀 위험스..

이클립스 인스톨러에서 Eclipse IDE for Enterprise java Developers 선택
java VM 을 Java 11로 지정
인스톨 위치 사용자/사용자이름/이클립스/jee-2020-12인지 확인 후 인스톨

gu (graalvm update)

gu
gu available
-> native-image  있으면
gu install native-image 치면 다운로드 됨

맥 사용자는
sudo gu install native-image 엔터

윈도우는 del *.exe
맥은 rm hello 이런 식으로 파일 지움

Error: LinkageError occurred while loading main class Hello
        java.lang.UnsupportedClassVersionError: Hello has been compiled by a more recent version of the Java Runtime (class file version 59.0), 
        this version of the Java Runtime only recognizes class file versions up to 55.0
이 에러는 클래스의 버전이 unsupported한 버전이라는 에러. 컴파일 다시 하면 됨ㅁ(javac Hello.java)

native-image Hello
graalvm에서 지원하는 것으로 가짜 기계어(bytecode)가 아닌 진짜 기계어로 바꿔줌(윈도우에선 지원 안되기 때문에
따로 컴파일러를 받아야 한다)


윈도우는 
microsoft.com/en-gb/download
가서 커뮤니티 다운로드
설치 후 뜨는 화면에서
C++를 사용한 데스크톱 개발 체크 - 
옵션 체크에서
최신 v142 빌드 도구용 C++ MFC(x86 및 x64)
 v142 빌드 도구용 C++/CLI 지원(14.28)
v142 빌드 도구용 C++ 모듈(x64/x86 – 실험적)
Windows용 C++ Clang 도구(10.0.0 - x64/x86)
MSVC v141 - VS 2017 C++ x64/x86 빌드 도구(v14
체크
-> 이건 꼭 안깔아도 됨

설정은 암기가 안됨 자전거타듯이 몸으로 익혀야 함


윈도우는 10, 웹브라우저는 크롬, JDK는 11

설정 영 안되면 내일 질문하기

맥에선 이클립스 설정할때 
java - installed JREs 에서 graalvm 선택할때
graalvm 없으면 add 할 때 home까지 들어가야 함 근데 java home 잘 설정하면 저절로 뜰 것





